# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/user_guide/reference/platform-app-yaml.html

# The name of this app. Must be unique within a project.
name: "app"

# The runtime the application uses.
type: "ruby:2.7"

dependencies:
    nodejs:
        yarn: "*"

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: 'db:postgresql'

# The size of the persistent disk of the application (in MB).
disk: 1024

# Set environment variables to adjust how Rails will run.
variables:
    env:
        BUNDLE_CACHE_ALL: '1'
        BUNDLE_CLEAN: '1'
        BUNDLE_DEPLOYMENT: '1'
        BUNDLE_ERROR_ON_STDERR: '1'
        BUNDLE_WITHOUT: 'development:test'
        DEFAULT_BUNDLER_VERSION: "2.2.26" # in case none is mentioned in Gemfile.lock
        EXECJS_RUNTIME: 'Node'
        # @todo should this be mapped to ${PLATFORM_ENVIRONMENT_TYPE}
        NODE_ENV: 'production'
        NODE_VERSION: v14.17.6
        NVM_VERSION: v0.38.0
        # @todo should this be mapped to ${PLATFORM_ENVIRONMENT_TYPE}
        RACK_ENV: 'production'
        # @todo should this be mapped to ${PLATFORM_ENVIRONMENT_TYPE}
        RAILS_ENV: 'production'
        RAILS_LOG_TO_STDOUT: '1'
        RAILS_TMP: '/tmp'

# The 'mounts' describe writable, persistent filesystem mounts in the application.
mounts:
    "/log":
        source: local
        source_path: log
    "/storage":
        source: local
        source_path: storage
    "/tmp":
        source: local
        source_path: tmp

# The hooks executed at various points in the lifecycle of the application.
hooks:
    # The build hook turns what is in source control into the deployable application.
    build: |
        /usr/bin/env scripts/build.sh
    # The deploy hook runs after your application has been deployed and started.
    deploy: |
        bundle exec rails db:migrate
# The configuration of the application when running.
web:
    upstream:
        # Send requests to the app server through a unix socket, whose location
        # will be defined in an environment variable named SOCKET.
        socket_family: "unix"

    commands:
        start: 'bundle exec unicorn -l $SOCKET'

source:
  operations:
    auto-update:
      command: |
        # this sets up nvm / node so we can have the right version for yarn updates
        unset NPM_CONFIG_PREFIX
        export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        # install.sh will automatically install NodeJS based on the presence of $NODE_VERSION
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        echo "yarn" >> "${NVM_DIR}/default-packages"
        # hey, we can finally run our source operation script!
        python scripts/autoupdate.py
